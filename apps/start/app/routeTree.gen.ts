/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as mainRouteImport } from "./routes/__main/route";
import { Route as mainIndexImport } from "./routes/__main/index";
import { Route as mainEntityIndexImport } from "./routes/__main/entity/index";

// Create/Update Routes

const mainRouteRoute = mainRouteImport.update({
	id: "/__main",
	getParentRoute: () => rootRoute,
} as any);

const mainIndexRoute = mainIndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => mainRouteRoute,
} as any);

const mainEntityIndexRoute = mainEntityIndexImport.update({
	id: "/entity/",
	path: "/entity/",
	getParentRoute: () => mainRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/__main": {
			id: "/__main";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof mainRouteImport;
			parentRoute: typeof rootRoute;
		};
		"/__main/": {
			id: "/__main/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof mainIndexImport;
			parentRoute: typeof mainRouteImport;
		};
		"/__main/entity/": {
			id: "/__main/entity/";
			path: "/entity";
			fullPath: "/entity";
			preLoaderRoute: typeof mainEntityIndexImport;
			parentRoute: typeof mainRouteImport;
		};
	}
}

// Create and export the route tree

interface mainRouteRouteChildren {
	mainIndexRoute: typeof mainIndexRoute;
	mainEntityIndexRoute: typeof mainEntityIndexRoute;
}

const mainRouteRouteChildren: mainRouteRouteChildren = {
	mainIndexRoute: mainIndexRoute,
	mainEntityIndexRoute: mainEntityIndexRoute,
};

const mainRouteRouteWithChildren = mainRouteRoute._addFileChildren(
	mainRouteRouteChildren,
);

export interface FileRoutesByFullPath {
	"": typeof mainRouteRouteWithChildren;
	"/": typeof mainIndexRoute;
	"/entity": typeof mainEntityIndexRoute;
}

export interface FileRoutesByTo {
	"/": typeof mainIndexRoute;
	"/entity": typeof mainEntityIndexRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/__main": typeof mainRouteRouteWithChildren;
	"/__main/": typeof mainIndexRoute;
	"/__main/entity/": typeof mainEntityIndexRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "" | "/" | "/entity";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/entity";
	id: "__root__" | "/__main" | "/__main/" | "/__main/entity/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	mainRouteRoute: typeof mainRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
	mainRouteRoute: mainRouteRouteWithChildren,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/__main"
      ]
    },
    "/__main": {
      "filePath": "__main/route.tsx",
      "children": [
        "/__main/",
        "/__main/entity/"
      ]
    },
    "/__main/": {
      "filePath": "__main/index.tsx",
      "parent": "/__main"
    },
    "/__main/entity/": {
      "filePath": "__main/entity/index.tsx",
      "parent": "/__main"
    }
  }
}
ROUTE_MANIFEST_END */
